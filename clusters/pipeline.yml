---
govc_env: &govc_env
  GOVC_INSECURE: "true"
  GOVC_URL: https://((vsphere.server))/sdk
  GOVC_USERNAME: ((vsphere.user))
  GOVC_PASSWORD: ((vsphere.password))
  GOVC_DATACENTER: "Datacenter"
  GOVC_DATASTORE: "Datastore 1"
  GOVC_NETWORK: "VM Network"
  GOVC_RESOURCE_POOL: "ClusterAPI"
  DEBUG: "true"

vsphere_env: &vsphere_env
  VSPHERE_USERNAME: ((vsphere.user))
  VSPHERE_PASSWORD: ((vsphere.password))
  VSPHERE_DATACENTER: Datacenter
  VSPHERE_DATASTORE: Datastore 1
  VSPHERE_NETWORK: VM Network
  VSPHERE_SERVER: ((vsphere.server))
  VSPHERE_SSH_AUTHORIZED_KEY: ((ssh_authorized_key))
  VSPHERE_RESOURCE_POOL: ClusterAPI
  VSPHERE_FOLDER: ClusterAPI

s3_env: &s3_env
  bucket: concourse
  endpoint: ((s3.endpoint))
  access_key_id: ((s3.access_key))
  secret_access_key: ((s3.secret_key))

show_terraform_output: &show_terraform_output
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: busybox
        tag: latest
    inputs:
      - name: terraform
    run:
      path: /bin/sh
      args:
        - -c
        - |
          echo "name: $(cat terraform/name)"
          echo "metadata: $(cat terraform/metadata)"

resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
      tag: latest

resources:
  - name: pipelines
    type: git
    source:
      uri: git@github.com:spiegela/spieg-pipelines.git
      branch: master
      private_key: ((git_private_key))

  - name: terraform
    type: terraform
    source:
      env_name: spieg
      backend_type: s3
      backend_config:
        endpoint: ((s3.endpoint))
        region: us-east-1
        skip_credentials_validation: "true"
        access_key: ((s3.access_key))
        secret_key: ((s3.secret_key))
        bucket: terraform
        key: terraform.tfstate
      vars:
        vsphere_server: ((vsphere.server))
        vsphere_user: ((vsphere.user))
        vsphere_password: ((vsphere.password))
        template_host: ((vsphere.template_host))

  - name: microk8s-config
    type: s3
    source:
      versioned_file: ClusterAPI/microk8s/config
      <<: *s3_env

  - name: gamboge-config
    type: s3
    source:
      versioned_file: ClusterAPI/gamboge/config
      <<: *s3_env

  - name: gamboge-cluster
    type: s3
    source:
      versioned_file: ClusterAPI/gamboge/cluster.yaml
      <<: *s3_env

  - name: clusterctl-release
    type: github-release
    source:
      owner: kubernetes-sigs
      repository: cluster-api
      private_key: ((git_private_key))
      pre_release: true

  - name: jonquil-cluster
    type: s3
    source:
      bucket: concourse
      versioned_file: ClusterAPI/jonquil/cluster.yaml
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key))
      secret_access_key: ((s3.secret_key))

  - name: mikado-cluster
    type: s3
    source:
      bucket: concourse
      versioned_file: ClusterAPI/mikado/cluster.yaml
      endpoint: ((s3.endpoint))
      access_key_id: ((s3.access_key))
      secret_access_key: ((s3.secret_key))

jobs:

  - name: create-template-vms
    plan:
      - get: pipelines
        trigger: true
      - put: terraform
        params:
          terraform_source: pipelines/terraform/capv-template
          vars:
            capv_template_name: ubuntu-1804-kube-v1.18.2
            capv_image: http://storage.googleapis.com/capv-images/release/v1.18.2/ubuntu-1804-kube-v1.18.2.ova
            haproxy_template_name: capv-haproxy-v1.2.4
            haproxy_image: http://storage.googleapis.com/capv-images/extra/haproxy/release/v1.2.4/photon-3-haproxy-v1.2.4.ova
      - task: show-outputs
        <<: *show_terraform_output
      - task: power-off-vm
        file: pipelines/tasks/govc-cmd/task.yml
        input_mapping:
          config: config
        params:
          <<: *govc_env
          ARGS: vm.power -off ubuntu-1804-kube-v1.18.2
      - task: convert-to-template
        file: pipelines/tasks/govc-cmd/task.yml
        input_mapping:
          config: config
        params:
          <<: *govc_env
          ARGS: vm.markastemplate ubuntu-1804-kube-v1.18.2

  - name: make-capv-template
    plan:
      - get: pipelines
        trigger: true
      - get: terraform
        trigger: true
        passed:
          - create-template-vms
      - task: power-off-vm
        file: pipelines/tasks/govc-cmd/task.yml
        input_mapping:
          config: config
        params:
          <<: *govc_env
          IGNORE_ERROR: true
          ARGS: vm.power -off ubuntu-1804-kube-v1.18.2
      - task: convert-to-template
        file: pipelines/tasks/govc-cmd/task.yml
        input_mapping:
          config: config
        params:
          <<: *govc_env
          IGNORE_ERROR: true
          ARGS: vm.markastemplate ubuntu-1804-kube-v1.18.2

  - name: make-haproxy-template
    plan:
      - get: pipelines
      - get: terraform
        trigger: true
        passed:
          - create-template-vms
      - task: power-off-vm
        file: pipelines/tasks/govc-cmd/task.yml
        input_mapping:
          config: config
        params:
          <<: *govc_env
          IGNORE_ERROR: true
          ARGS: vm.power -off capv-haproxy-v1.2.4
      - task: convert-to-template
        file: pipelines/tasks/govc-cmd/task.yml
        input_mapping:
          config: config
        params:
          <<: *govc_env
          IGNORE_ERROR: true
          ARGS: vm.markastemplate capv-haproxy-v1.2.4

  - name: gamboge-cluster-yaml
    plan:
      - in_parallel:
        - get: pipelines
          trigger: true
        - get: microk8s-config
        - get: clusterctl-release
          trigger: true
          params:
            glob: clusterctl-linux-amd64

      - task: generate-cluster-yaml
        file: pipelines/tasks/vsphere-cluster-config/task.yml
        input_mapping:
          clusterctl: clusterctl-release
          config: microk8s-config
        params:
          <<: *vsphere_env
          GITHUB_TOKEN: ((git_token))
          CLUSTER_NAME: gamboge
          VSPHERE_HAPROXY_TEMPLATE: capv-haproxy-v1.2.4
          VSPHERE_TEMPLATE: ubuntu-1804-kube-v1.18.2
          CONTROL_PLANE_MACHINE_COUNT: 3
          WOKER_MACHINE_COUNT: 1
          KUBERNETES_VERSION: 1.18.2
          NAMESPACE: default

      - put: gamboge-cluster
        params:
          file: cluster/cluster.yaml

  - name: jonquil-cluster-yaml
    plan:
      - in_parallel:
          - get: pipelines
            trigger: true
          - get: microk8s-config
          - get: clusterctl-release
            trigger: true
            params:
              glob: clusterctl-linux-amd64

      - task: generate-cluster-yaml
        file: pipelines/tasks/vsphere-cluster-config/task.yml
        input_mapping:
          clusterctl: clusterctl-release
          config: microk8s-config
        params:
          <<: *vsphere_env
          GITHUB_TOKEN: ((git_token))
          CLUSTER_NAME: jonquil
          VSPHERE_HAPROXY_TEMPLATE: capv-haproxy-v1.2.4
          VSPHERE_TEMPLATE: ubuntu-1804-kube-v1.18.2
          CONTROL_PLANE_MACHINE_COUNT: 3
          WOKER_MACHINE_COUNT: 1
          KUBERNETES_VERSION: 1.18.2
          NAMESPACE: default

      - put: jonquil-cluster
        params:
          file: cluster/cluster.yaml

  - name: mikado-cluster-yaml
    plan:
      - in_parallel:
          - get: pipelines
            trigger: true
          - get: microk8s-config
          - get: clusterctl-release
            trigger: true
            params:
              glob: clusterctl-linux-amd64

      - task: generate-cluster-yaml
        file: pipelines/tasks/vsphere-cluster-config/task.yml
        input_mapping:
          clusterctl: clusterctl-release
          config: microk8s-config
        params:
          <<: *vsphere_env
          GITHUB_TOKEN: ((git_token))
          CLUSTER_NAME: mikado
          VSPHERE_HAPROXY_TEMPLATE: capv-haproxy-v1.2.4
          VSPHERE_TEMPLATE: ubuntu-1804-kube-v1.18.2
          CONTROL_PLANE_MACHINE_COUNT: 3
          WOKER_MACHINE_COUNT: 1
          KUBERNETES_VERSION: 1.18.2
          NAMESPACE: default

      - put: mikado-cluster
        params:
          file: cluster/cluster.yaml

  - name: gamboge-cluster
    plan:
      - in_parallel:
        - get: pipelines
        - get: microk8s-config
        - get: gamboge-cluster
          trigger: true
          passed:
            - gamboge-cluster-yaml

      - task: create-cluster
        file: pipelines/tasks/kubectl-apply-template/task.yml
        input_mapping:
          config: microk8s-config
          templates: gamboge-cluster

      - task: wait-until-provisioned
        file: pipelines/tasks/wait-until-cluster-provisioned/task.yml
        input_mapping:
          config: microk8s-config
        params:
          NAME: gamboge

      - task: fetch-secret
        file: pipelines/tasks/kubectl-cmd/task.yml
        input_mapping:
          config: microk8s-config
          templates: gamboge-cluster
        output_mapping:
          output: encoded-secret
        params:
          COMMAND: get
          ARGS: |
            secret gamboge-kubeconfig -o jsonpath='.data.value'

      - task: decode-secret
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
              tag: latest
          inputs:
            - name: terraform
          outputs:
            - name: kubeconfig
          run:
            path: /bin/sh
            args:
              - -c
              - |
                base64 -d encoded-secret/kubectl-cmd.out > kubeconfig/config

      - put: gamboge-config
        params:
          file: kubeconfig/config
